# Contains the specifications for the datasets used
[DEFAULT]
scaling = True
# NOTE: Changing default clustering method to kcenter for updated robust experiments
# clustering_method = kmeans
clustering_method = kcenter

# Description of entries 
[example]
csv_file = # path to the csv_file
separator = # separator used in the csv_file
columns = # columns to use for clustering (coordinates)
variable_of_interest = # columns to collect fairness statistics for
fairness_variable = # columns to perform fairness balancing on
text_columns = # columns that are text (should include variable_of_interest + fairness_variable if they are text)
_conditions = # for all variable_of_interest columns the buckets for the columns are specified
              # title for this entry in the config file should be the name of the fairness variable 
              # (see below for examples)

[bank]
csv_file = data/bank.csv
separator = ;
columns = age, balance, duration
text_columns = marital, default
variable_of_interest = marital, default
fairness_variable = marital, default
marital_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2
default_conditions = lambda x : x == 0, lambda x : x == 1

[bank_marital]
csv_file = data/bank.csv
separator = ;
columns = age, balance, duration
text_columns = marital
variable_of_interest = marital
fairness_variable = marital
marital_conditions = lambda x : x == 0, lambda x : x == 1
default_conditions = lambda x : x == 0, lambda x : x == 1

[bank_binary_marital]
csv_file = data/bank_binary_marital_shuffled.csv
separator = ;
columns = age, balance, duration
text_columns = marital
variable_of_interest = marital
fairness_variable = marital
marital_conditions = lambda x : x == 0, lambda x : x == 1
default_conditions = lambda x : x == 0, lambda x : x == 1

[test_bank_binary_marital]
csv_file = data/test/bank_binary_marital_shuffled_toy.csv
separator = ;
columns = age, balance, duration
text_columns = marital
variable_of_interest = marital
fairness_variable = marital
marital_conditions = lambda x : x == 0, lambda x : x == 1
default_conditions = lambda x : x == 0, lambda x : x == 1

[synthetic_1d]
csv_file = data/synthetic_1d.csv
separator = ,
columns = x
text_columns = 
variable_of_interest =  
fairness_variable = 


[bank_default]
csv_file = data/bank.csv
separator = ;
columns = age, balance, duration
text_columns = marital, default
variable_of_interest = marital, default
fairness_variable = default
marital_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2
default_conditions = lambda x : x == 0, lambda x : x == 1

[bank_ss]
csv_file = data/subsampled_bank.csv
separator = ;
columns = age, balance, duration
text_columns = marital, default
variable_of_interest = marital, default
fairness_variable = marital, default
marital_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2
default_conditions = lambda x : x == 0, lambda x : x == 1

[bank_ss_marital]
csv_file = data/subsampled_bank.csv
separator = ;
columns = age, balance, duration
text_columns = marital, default
variable_of_interest = marital, default
fairness_variable = marital
marital_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2
default_conditions = lambda x : x == 0, lambda x : x == 1

[bank_ss_default]
csv_file = data/subsampled_bank.csv
separator = ;
columns = age, balance, duration
text_columns = marital, default
variable_of_interest = marital, default
fairness_variable = default
marital_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2
default_conditions = lambda x : x == 0, lambda x : x == 1

[adult]
csv_file = data/adult.csv
separator =, 
columns = age, final-weight, education-num, capital-gain, hours-per-week
text_columns = race, sex
variable_of_interest = race, sex
fairness_variable = race, sex
race_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2, lambda x : x == 3, lambda x : x == 4
sex_conditions = lambda x : x == 0, lambda x : x == 1

[adult_race]
csv_file = data/adult.csv
separator =, 
columns = age, final-weight, education-num, capital-gain, hours-per-week
text_columns = race, sex
variable_of_interest = sex
fairness_variable = race
race_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2, lambda x : x == 3, lambda x : x == 4
sex_conditions = lambda x : x == 0, lambda x : x == 1

[adult_sex]
csv_file = data/adult_shuffled.csv
separator =, 
columns = age, final-weight, education-num, capital-gain, hours-per-week
text_columns = race, sex
variable_of_interest = sex
fairness_variable = sex
# Binarizing race for testing purposes
; race_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2, lambda x : x == 3, lambda x : x == 4
race_conditions = lambda x : x in [0, 1], lambda x : x in [2, 3, 4]
sex_conditions = lambda x : x == 0, lambda x : x == 1


# Create age buckets for testing > 2 colors
[adult_age]
csv_file = data/adult_shuffled.csv
separator =, 
columns = final-weight, education-num, capital-gain, hours-per-week
text_columns = race, sex
variable_of_interest = age
fairness_variable = age
race_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2, lambda x : x == 3, lambda x : x == 4
sex_conditions = lambda x : x == 0, lambda x : x == 1
age_conditions = lambda x : x < 26, lambda x : 26 <= x < 40, lambda x: x >= 41



[adult_ss]
csv_file = data/subsampled_adult.csv
separator =, 
columns = age, final-weight, education-num, capital-gain, hours-per-week
text_columns = race, sex
variable_of_interest = race, sex
fairness_variable = race, sex
race_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2, lambda x : x == 3, lambda x : x == 4
sex_conditions = lambda x : x == 0, lambda x : x == 1

[adult_ss_race]
csv_file = data/subsampled_adult.csv
separator =, 
columns = age, final-weight, education-num, capital-gain, hours-per-week
text_columns = race, sex
variable_of_interest = race, sex
fairness_variable = race
race_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2, lambda x : x == 3, lambda x : x == 4
sex_conditions = lambda x : x == 0, lambda x : x == 1

[adult_ss_sex]
csv_file = data/subsampled_adult.csv
separator =, 
columns = age, final-weight, education-num, capital-gain, hours-per-week
text_columns = race, sex
variable_of_interest = race, sex
fairness_variable = sex
race_conditions = lambda x : x == 0, lambda x : x == 1, lambda x : x == 2, lambda x : x == 3, lambda x : x == 4
sex_conditions = lambda x : x == 0, lambda x : x == 1

[creditcard]
csv_file = data/creditcard.csv
separator=,
columns = LIMIT_BAL,AGE,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6
variable_of_interest = MARRIAGE, EDUCATION
fairness_variable = MARRIAGE, EDUCATION
MARRIAGE_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x == 3
EDUCATION_conditions = lambda x: x <= 1, lambda x: x == 2, lambda x: x == 3, lambda x: x >= 4

[creditcard_marriage]
csv_file = data/creditcard.csv
separator=,
columns = LIMIT_BAL,AGE,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6
variable_of_interest = MARRIAGE
fairness_variable = MARRIAGE
MARRIAGE_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x == 3
EDUCATION_conditions = lambda x: x <= 1, lambda x: x == 2, lambda x: x == 3, lambda x: x >= 4

[creditcard_education]
csv_file = data/creditcard.csv
separator=,
columns = LIMIT_BAL,AGE,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6
variable_of_interest = EDUCATION
fairness_variable = EDUCATION
MARRIAGE_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x == 3
EDUCATION_conditions = lambda x: x <= 1, lambda x: x == 2, lambda x: x == 3, lambda x: x >= 4


[creditcard_net]
csv_file = data/creditcard_shuffled.csv
separator=,
columns = AGE,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6
variable_of_interest = LIMIT_BAL
fairness_variable = LIMIT_BAL
MARRIAGE_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x == 3
EDUCATION_conditions = lambda x: x <= 1, lambda x: x == 2, lambda x: x == 3, lambda x: x >= 4


[creditcard_ss]
csv_file = data/subsampled_creditcard.csv
separator=,
columns = LIMIT_BAL,AGE,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6
text_columns = MARRIAGE, EDUCATION
variable_of_interest = MARRIAGE, EDUCATION
fairness_variable = MARRIAGE, EDUCATION
MARRIAGE_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x == 3
EDUCATION_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x >= 3

[creditcard_ss_marriage]
csv_file = data/subsampled_creditcard.csv
separator=,
columns = LIMIT_BAL,AGE,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6
text_columns = MARRIAGE, EDUCATION
variable_of_interest = MARRIAGE, EDUCATION
fairness_variable = MARRIAGE
MARRIAGE_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x == 3
EDUCATION_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x >= 3

[creditcard_ss_education]
csv_file = data/subsampled_creditcard.csv
separator=,
columns = LIMIT_BAL,AGE,BILL_AMT1,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6
text_columns = MARRIAGE, EDUCATION
variable_of_interest = MARRIAGE, EDUCATION
fairness_variable = EDUCATION
MARRIAGE_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x == 3
EDUCATION_conditions = lambda x: x == 0, lambda x: x == 1, lambda x: x == 2, lambda x: x >= 3

[census1990]
csv_file = data/census1990.csv
separator=,
columns = dAncstry1,dAncstry2,iAvail,iCitizen,iClass,dDepart,iDisabl1,iDisabl2,iEnglish,iFeb55,iFertil,dHispanic,dHour89,dHours,iImmigr,dIncome1,dIncome2,dIncome3,dIncome4,dIncome5,dIncome6,dIncome7,dIncome8,dIndustry,iKorean,iLang1,iLooking,iMarital,iMay75880,iMeans,iMilitary,iMobility,iMobillim,dOccup,iOthrserv,iPerscare,dPOB,dPoverty,dPwgt1,iRagechld,dRearning,iRelat1,iRelat2,iRemplpar,iRiders,iRlabor,iRownchld,dRpincome,iRPOB,iRrelchld,iRspouse,iRvetserv,iSchool,iSept80,iSubfam1,iSubfam2,iTmpabsnt,dTravtime,iVietnam,dWeek89,iWork89,iWorklwk,iWWII,iYearsch,iYearwrk,dYrsserv
variable_of_interest = dAge, iSex
fairness_variable = dAge, iSex
dAge_conditions = lambda x: x == 0,lambda x: x == 1, lambda x: x == 2,lambda x: x == 3,lambda x: x == 4,lambda x: x == 5,lambda x: x == 6,lambda x: x == 7
iSex_conditions = lambda x: x == 0,lambda x: x == 1

[census1990_ss]
csv_file = data/subsampled_census1990.csv
separator=,
columns = dAncstry1,dAncstry2,iAvail,iCitizen,iClass,dDepart,iDisabl1,iDisabl2,iEnglish,iFeb55,iFertil,dHispanic,dHour89,dHours,iImmigr,dIncome1,dIncome2,dIncome3,dIncome4,dIncome5,dIncome6,dIncome7,dIncome8,dIndustry,iKorean,iLang1,iLooking,iMarital,iMay75880,iMeans,iMilitary,iMobility,iMobillim,dOccup,iOthrserv,iPerscare,dPOB,dPoverty,dPwgt1,iRagechld,dRearning,iRelat1,iRelat2,iRemplpar,iRiders,iRlabor,iRownchld,dRpincome,iRPOB,iRrelchld,iRspouse,iRvetserv,iSchool,iSept80,iSubfam1,iSubfam2,iTmpabsnt,dTravtime,iVietnam,dWeek89,iWork89,iWorklwk,iWWII,iYearsch,iYearwrk,dYrsserv
variable_of_interest = dAge, iSex
fairness_variable = dAge, iSex
dAge_conditions = lambda x: x == 0,lambda x: x == 1, lambda x: x == 2,lambda x: x == 3,lambda x: x == 4,lambda x: x == 5,lambda x: x == 6,lambda x: x == 7
iSex_conditions = lambda x: x == 0,lambda x: x == 1



[census1990_ss_age_7_classes]
csv_file = data/subsampled_census1990_classes_7.csv
separator=,
columns = dAncstry1,dAncstry2,iAvail,iCitizen,iClass,dDepart,iDisabl1,iDisabl2,iEnglish,iFeb55,iFertil,dHispanic,dHour89,dHours,iImmigr,dIncome1,dIncome2,dIncome3,dIncome4,dIncome5,dIncome6,dIncome7,dIncome8,dIndustry,iKorean,iLang1,iLooking,iMarital,iMay75880,iMeans,iMilitary,iMobility,iMobillim,dOccup,iOthrserv,iPerscare,dPOB,dPoverty,dPwgt1,iRagechld,dRearning,iRelat1,iRelat2,iRemplpar,iRiders,iRlabor,iRownchld,dRpincome,iRPOB,iRrelchld,iRspouse,iRvetserv,iSchool,iSept80,iSubfam1,iSubfam2,iTmpabsnt,dTravtime,iVietnam,dWeek89,iWork89,iWorklwk,iWWII,iYearsch,iYearwrk,dYrsserv
variable_of_interest = dAge
fairness_variable = dAge
dAge_conditions = lambda x: x == 0,lambda x: x == 1, lambda x: x == 2,lambda x: x == 3,lambda x: x == 4,lambda x: x == 5,lambda x: x == 6
iSex_conditions = lambda x: x == 0,lambda x: x == 1
#dAge_conditions have been changed to merge color 0 with 1 

[census1990_ss_age_3_classes]
csv_file = data/subsampled_census1990_classes_3.csv
separator=,
columns = dAncstry1,dAncstry2,iAvail,iCitizen,iClass,dDepart,iDisabl1,iDisabl2,iEnglish,iFeb55,iFertil,dHispanic,dHour89,dHours,iImmigr,dIncome1,dIncome2,dIncome3,dIncome4,dIncome5,dIncome6,dIncome7,dIncome8,dIndustry,iKorean,iLang1,iLooking,iMarital,iMay75880,iMeans,iMilitary,iMobility,iMobillim,dOccup,iOthrserv,iPerscare,dPOB,dPoverty,dPwgt1,iRagechld,dRearning,iRelat1,iRelat2,iRemplpar,iRiders,iRlabor,iRownchld,dRpincome,iRPOB,iRrelchld,iRspouse,iRvetserv,iSchool,iSept80,iSubfam1,iSubfam2,iTmpabsnt,dTravtime,iVietnam,dWeek89,iWork89,iWorklwk,iWWII,iYearsch,iYearwrk,dYrsserv
variable_of_interest = dAge
fairness_variable = dAge
dAge_conditions = lambda x: x == 0,lambda x: x == 1, lambda x: x == 2,lambda x: x == 3,lambda x: x == 4,lambda x: x == 5,lambda x: x == 6,lambda x: x == 7
iSex_conditions = lambda x: x == 0,lambda x: x == 1

[diabetes]
csv_file = data/diabetic_data_avg_age.csv
separator=,
columns = race,age,weight,admission_type_id,discharge_disposition_id,admission_source_id,time_in_hospital,payer_code,medical_specialty,num_lab_procedures,num_procedures,num_medications,number_outpatient,number_emergency,number_inpatient,diag_1,diag_2,diag_3,number_diagnoses,max_glu_serum,A1Cresult,metformin,repaglinide,nateglinide,chlorpropamide,glimepiride,acetohexamide,glipizide,glyburide,tolbutamide,pioglitazone,rosiglitazone,acarbose,miglitol,troglitazone,tolazamide,examide,citoglipton,insulin,glyburide-metformin,glipizide-metformin,glimepiride-pioglitazone,metformin-rosiglitazone,metformin-pioglitazone,change,diabetesMed,readmitted
text_columns = race,weight,payer_code,medical_specialty,diag_1,diag_2,diag_3,max_glu_serum,A1Cresult,metformin,repaglinide,nateglinide,chlorpropamide,glimepiride,acetohexamide,glipizide,glyburide,tolbutamide,pioglitazone,rosiglitazone,acarbose,miglitol,troglitazone,tolazamide,examide,citoglipton,insulin,glyburide-metformin,glipizide-metformin,glimepiride-pioglitazone,metformin-rosiglitazone,metformin-pioglitazone,change,diabetesMed,readmitted
variable_of_interest = gender
fairness_variable = gender
gender_conditions = lambda x: x == 'Female', lambda x: x != 'Female'
